/*
 *  WARNING: THIS FILE IS AUTO-GENERATED. CHANGES WILL BE OVERWRITTEN.
 *  Generated by https://github.com/johndoe31415/mcuconfig
 */

/**
 *	mcuconfig - Generation of microcontroller build setups.
 *	Copyright (C) 2019-2020 Johannes Bauer
 *
 *	This file is part of mcuconfig.
 *
 *	mcuconfig is free software; you can redistribute it and/or modify
 *	it under the terms of the GNU General Public License as published by
 *	the Free Software Foundation; this program is ONLY licensed under
 *	version 3 of the License, later versions are explicitly excluded.
 *
 *	mcuconfig is distributed in the hope that it will be useful,
 *	but WITHOUT ANY WARRANTY; without even the implied warranty of
 *	MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 *	GNU General Public License for more details.
 *
 *	You should have received a copy of the GNU General Public License
 *	along with mcuconfig; if not, write to the Free Software
 *	Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
 *
 *	Johannes Bauer <JohannesBauer@gmx.de>
**/

#ifndef __STM32_F103_SYSTEM_H__
#define __STM32_F103_SYSTEM_H__

#include <stm32f10x_gpio.h>

// led_red: PB0, mode = OutputPushPull
#define led_red_PORT					GPIOB
#define led_red_PIN					0
#define led_red_MASK					(1 << led_red_PIN)
#define led_red_set_high()			led_red_PORT->BSRR = led_red_MASK
#define led_red_set_low()			led_red_PORT->BRR = led_red_MASK
#define led_red_set_active()			led_red_set_high()
#define led_red_set_inactive()		led_red_set_low()
#define led_red_toggle()				led_red_PORT->ODR ^= led_red_MASK
#define led_red_set_to(value)		if (value) { led_red_set_active(); } else { led_red_set_inactive(); }
#define led_red_set_logic_to(value)	if (value) { led_red_set_high(); } else { led_red_set_low(); }
#define led_red_get()				((led_red_PORT->IDR >> led_red_PIN) & 1)
#define led_red_is_high()			(led_red_get() != 0)
#define led_red_is_low()				(led_red_get() == 0)
#define led_red_is_active()			led_red_is_high()
#define led_red_is_inactive()		led_red_is_low()

// led_yellow: PB1, mode = OutputPushPull
#define led_yellow_PORT					GPIOB
#define led_yellow_PIN					1
#define led_yellow_MASK					(1 << led_yellow_PIN)
#define led_yellow_set_high()			led_yellow_PORT->BSRR = led_yellow_MASK
#define led_yellow_set_low()			led_yellow_PORT->BRR = led_yellow_MASK
#define led_yellow_set_active()			led_yellow_set_high()
#define led_yellow_set_inactive()		led_yellow_set_low()
#define led_yellow_toggle()				led_yellow_PORT->ODR ^= led_yellow_MASK
#define led_yellow_set_to(value)		if (value) { led_yellow_set_active(); } else { led_yellow_set_inactive(); }
#define led_yellow_set_logic_to(value)	if (value) { led_yellow_set_high(); } else { led_yellow_set_low(); }
#define led_yellow_get()				((led_yellow_PORT->IDR >> led_yellow_PIN) & 1)
#define led_yellow_is_high()			(led_yellow_get() != 0)
#define led_yellow_is_low()				(led_yellow_get() == 0)
#define led_yellow_is_active()			led_yellow_is_high()
#define led_yellow_is_inactive()		led_yellow_is_low()

// led_green: PB2, mode = OutputPushPull
#define led_green_PORT					GPIOB
#define led_green_PIN					2
#define led_green_MASK					(1 << led_green_PIN)
#define led_green_set_high()			led_green_PORT->BSRR = led_green_MASK
#define led_green_set_low()			led_green_PORT->BRR = led_green_MASK
#define led_green_set_active()			led_green_set_high()
#define led_green_set_inactive()		led_green_set_low()
#define led_green_toggle()				led_green_PORT->ODR ^= led_green_MASK
#define led_green_set_to(value)		if (value) { led_green_set_active(); } else { led_green_set_inactive(); }
#define led_green_set_logic_to(value)	if (value) { led_green_set_high(); } else { led_green_set_low(); }
#define led_green_get()				((led_green_PORT->IDR >> led_green_PIN) & 1)
#define led_green_is_high()			(led_green_get() != 0)
#define led_green_is_low()				(led_green_get() == 0)
#define led_green_is_active()			led_green_is_high()
#define led_green_is_inactive()		led_green_is_low()


void default_fault_handler(void);
void early_system_init(void);

#endif
